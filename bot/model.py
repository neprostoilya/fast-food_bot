from sqlalchemy import String, Integer, BigInteger, DECIMAL, create_engine, ForeignKey
from sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column, relationship, Session
from sqlalchemy.schema import UniqueConstraint

from config import DB_NAME, DB_HOST, DB_PASSWORD, DB_USER


engine = create_engine(f"postgresql://{DB_USER}:{DB_PASSWORD}@{DB_HOST}/{DB_NAME}", echo=False)


class Base(DeclarativeBase):
    pass


class Users(Base):
    """ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —é–∑–µ—Ä–∞. """
    __tablename__ = "users"

    user_id: Mapped[int] = mapped_column(primary_key=True)
    full_name: Mapped[str] = mapped_column(String(50))
    telegram_id: Mapped[int] = mapped_column(BigInteger, nullable=False, unique=True)
    phone: Mapped[int] = mapped_column(BigInteger, default=0)

    def __str__(self):
        """ –°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ. """
        return f"User(user_id={self.user_id!r}, " \
               f"full_name={self.full_name!r}, " \
               f"telegram_id={self.telegram_id!r}, " \
               f"phone={self.phone!r}) "

    def __repr__(self):
        """ –ü–æ–¥–æ–±–∏–µ —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è. """
        return str(self)
    

class Carts(Base):
    """ –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∫–æ—Ä–∑–∏–Ω–∫–∏ —é–∑–µ—Ä–∞. """
    __tablename__ = "carts"

    cart_id: Mapped[int] = mapped_column(primary_key=True)
    user_id: Mapped[int] = mapped_column(ForeignKey('users.user_id'), unique=True)
    total_price: Mapped[DECIMAL] = mapped_column(DECIMAL(12, 2), default=0)
    total_products: Mapped[int] = mapped_column(Integer, default=0)


    def __str__(self):
        """ –°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ. """
        return f"Cart(cart_id={self.cart_id!r}, " \
               f"user_id={self.user_id!r}, " \
               f"total_price={self.total_price!r}," \
               f"total_products={self.total_products!r}) "

    def __repr__(self):
        """ –ü–æ–¥–æ–±–∏–µ —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è. """
        return str(self)


class FinallyCarts(Base):
    """ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∫–æ—Ä–∑–∏–Ω–∫–∏ —é–∑–µ—Ä–∞. """
    __tablename__ = "finally_carts"

    finally_id: Mapped[int] = mapped_column(primary_key=True)
    cart_id: Mapped[int] = mapped_column(ForeignKey('carts.cart_id'))
    product_name: Mapped[str] = mapped_column(String(60), nullable=False)
    quantity: Mapped[int] = mapped_column(Integer, default=0)
    finall_price: Mapped[DECIMAL] = mapped_column(DECIMAL(12, 2))
    __table_args__ = (UniqueConstraint('cart_id', 'product_name'),)

    def __str__(self):
        """ –°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ. """
        return f"FinallyCarts(finally_id={self.finally_id!r}, " \
               f"cart_id={self.cart_id!r}, " \
               f"product_name={self.product_name!r}, " \
               f"quantity={self.quantity!r}, " \
               f"final_price={self.finall_price!r}) "

    def __repr__(self):
        """ –ü–æ–¥–æ–±–∏–µ —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è. """
        return str(self)


class Categories(Base):
    """ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤. """
    __tablename__ = "categories"

    category_id: Mapped[int] = mapped_column(primary_key=True)
    category_name: Mapped[str] = mapped_column(String(20), nullable=False, unique=True)

    def __str__(self):
        """ –°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ. """
        return f"Categories(category_id={self.category_id!r}, " \
               f"category_name={self.category_name!r}) "

    def __repr__(self):
        """ –ü–æ–¥–æ–±–∏–µ —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è. """
        return str(self)


class Products(Base):
    """ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤. """
    __tablename__ = "products"

    product_id: Mapped[int] = mapped_column(primary_key=True)
    category_id: Mapped[int] = mapped_column(Integer, ForeignKey('categories.category_id'))
    product_name: Mapped[str] = mapped_column(String(50), nullable=False, unique=True)
    product_price: Mapped[DECIMAL] = mapped_column(DECIMAL(12, 2), nullable=False)
    description: Mapped[str] = mapped_column(String(100))
    image: Mapped[str] = mapped_column(String)
    
    def __str__(self):
        """ –°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ. """
        return f"Products(product_id={self.product_id}, " \
               f"category_id={self.category_id}, " \
               f"product_name={self.product_name}, " \
               f"product_price={self.product_price}, " \
               f"description={self.description}, " \
               f"image={self.image}) "
    
    def __repr__(self):
        """ –ü–æ–¥–æ–±–∏–µ —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è. """        
        return str(self)
    

class History(Base):
    """ –°–æ–∑–¥–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫. """
    __tablename__ = "histories"

    history_id: Mapped[int] = mapped_column(primary_key=True)
    telegram_id: Mapped[int] = mapped_column(ForeignKey('users.telegram_id'))
    text: Mapped[str] = mapped_column(String, nullable=False)


    def __str__(self):
        """ –°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ. """
        return f"Histories(history_id={self.history_id}, " \
               f"telegram_id={self.telegram_id}, " \
               f"text={self.text} " 

    
    def __repr__(self):
        """ –ü–æ–¥–æ–±–∏–µ —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è. """        
        return str(self)
    
def main():
    """ –¢–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –∏ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è. """
    Base.metadata.create_all(engine)
    categories = ('üåØ –õ–∞–≤–∞—à–∏', 'ü•ô –î–æ–Ω–∞—Ä—ã', 'üå≠ –•–æ—Ç-–î–æ–≥–∏', 'üßÅ –î–µ—Å–µ—Ä—Ç—ã', 'üçπ –ù–∞–ø–∏—Ç–∫–∏', 'üçï –ü–∏—Ü—Ü–∞')
    products = (
        (1, '–õ–∞–≤–∞—à —Å –∫—É—Ä–∏—Ü–æ–π', 23000, '–ö—É—Ä–∏–Ω–Ω–æ–µ –º—è—Å–æ, —Å–∞–ª–∞—Ç, —Å–æ—É—Å, —Ç–µ—Å—Ç–æ, –ø–æ–º–∏–¥–æ—Ä—ã', 'media/lavash/_BBQ___.jpg'),
        (1, '–õ–∞–≤–∞—à —Å –≥–æ–≤—è–¥–∏–Ω–æ–π', 28000, '–ì–æ–≤—è–∂–µ–µ –º—è—Å–æ, —Ç–µ—Å—Ç–æ, –ø–æ–º–∏–¥–æ—Ä—ã, –æ–≥—É—Ä—Ü—ã', 'media/lavash/i.webp'),
        (1, '–õ–∞–≤–∞—à —Å —Å—ã—Ä–æ–º', 25000, '–ö—É—Ä–∏–Ω–Ω–æ–µ –º—è—Å–æ, —Ç–µ—Å—Ç–æ, –ø–æ–º–∏–¥–æ—Ä—ã, —Å—ã—Ä', 'media/lavash/XXL.webp'),
        (2, '–î–æ–Ω–∞—Ä —Å –≥–æ–≤–¥—è–Ω–Ω–æ–π', 26000, '–†–≤–∞–Ω–Ω–æ–µ –º—è—Å–æ, –æ–≤–æ—â–∏, –±—É–ª–ª–æ—á–∫–∞', 'media/donar/i (1).webp'),
        (2, '–î–æ–Ω–∞—Ä —Ñ–∏—Ä–º–µ—Ä–Ω—ã–π', 30000, '–†–≤–∞–Ω–Ω–æ–µ –º—è—Å–æ, –æ–≤–æ—â–∏, —Å–æ—É—Å, –±—É–ª–ª–æ—á–∫–∞', 'media/donar/i (2).webp'),
    )
    with Session(engine) as session:
        for category in categories:
            query = Categories(category_name=category)
            session.add(query)
            session.commit()
        for product in products:
            query = Products(
                category_id=product[0],
                product_name=product[1],
                product_price= product[2],
                description=product[3],
                image=product[4]
            )
            session.add(query)
            session.commit()

if __name__ == '__main__':
    main()